/*
	Copyright (C) 2007 Cory Nelson

	This software is provided 'as-is', without any express or implied
	warranty.  In no event will the authors be held liable for any damages
	arising from the use of this software.

	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:

	1. The origin of this software must not be misrepresented; you must not
		claim that you wrote the original software. If you use this software
		in a product, an acknowledgment in the product documentation would be
		appreciated but is not required.
	2. Altered source versions must be plainly marked as such, and must not be
		misrepresented as being the original software.
	3. This notice may not be removed or altered from any source distribution.
*/

#pragma once

#include <string>
#include <stdexcept>

struct sqlite3;
struct sqlite3_stmt;

namespace sqlite3x {

/*
	sqlite3_result is given as the result of step().
*/
enum sqlite3_result {
	busy	= 5,
	full	= 13,
	row	= 100,
	done	= 101
};

class sqlite3_command;
class database_error;

/*
	sqlite3_connection provides a connection to a SQLite 3 database.
*/
class sqlite3_connection {
private:
	friend sqlite3_command;
	friend database_error;

	sqlite3 *m_db;

	// non-copyable.
	sqlite3_connection(const sqlite3_connection&);
	void operator=(const sqlite3_connection&);

public:
	// defines the type of string a collation function prefers.
	enum collation_pref {
		collate_utf8		= 1,
		collate_utf16be	= 2,
		collate_utf16le	= 3,
		collate_utf16		= 4
	};

	// constructs a closed connection.
	sqlite3_connection();

	// opens a new connection.  db must be in UTF-8, and *is not* the user's locale!
	sqlite3_connection(const char *db);

	// opens a new connection.
	sqlite3_connection(const wchar_t *db);

	~sqlite3_connection();

	// opens a new connection.  db must be in UTF-8, and *is not* the user's locale!
	void open(const char *db);
	
	// opens a new connection.
	void open(const wchar_t *db);

	// closes the current connection.
	void close();

	// returns true if a connection is open.
	bool is_open() const;

	// returns the rowid generated by the last insert statement.
	long long insertid();

	// sets a timeout to busy-wait in milliseconds while waiting for a lock.
	void setbusytimeout(int ms);

	// creates a new collation.
	//TODO: document callback format.
	void create_collation(const char *name, collation_pref pref16, int(*cmp)(void*,int,const void*,int,const void*), void *data = 0);
	void create_collation(const wchar_t *name, collation_pref pref16, int(*cmp)(void*,int,const void*,int,const void*), void *data = 0);

	// executes a query string without a result.
	// char* and std::string versions must be in UTF-8.
	sqlite3_result executenonquery(const char *sql);
	sqlite3_result executenonquery(const wchar_t *sql);
	sqlite3_result executenonquery(const std::string &sql);
	sqlite3_result executenonquery(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as an int.
	// char* and std::string versions must be in UTF-8.
	int executeint(const char *sql);
	int executeint(const wchar_t *sql);
	int executeint(const std::string &sql);
	int executeint(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as a 64-bit long long.
	// char* and std::string versions must be in UTF-8.
	long long executeint64(const char *sql);
	long long executeint64(const wchar_t *sql);
	long long executeint64(const std::string &sql);
	long long executeint64(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as a double
	// char* and std::string versions must be in UTF-8.
	double executedouble(const char *sql);
	double executedouble(const wchar_t *sql);
	double executedouble(const std::string &sql);
	double executedouble(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as a UTF-8 string.
	// char* and std::string versions must be in UTF-8.
	std::string executestring(const char *sql);
	std::string executestring(const wchar_t *sql);
	std::string executestring(const std::string &sql);
	std::string executestring(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as wide-char string.
	// char* and std::string versions must be in UTF-8.
	std::wstring executestring16(const char *sql);
	std::wstring executestring16(const wchar_t *sql);
	std::wstring executestring16(const std::string &sql);
	std::wstring executestring16(const std::wstring &sql);

	// executes a query string, returning the first column of the first row as a binary string.
	// char* and std::string versions must be in UTF-8.
	std::string executeblob(const char *sql);
	std::string executeblob(const wchar_t *sql);
	std::string executeblob(const std::string &sql);
	std::string executeblob(const std::wstring &sql);
};

/*
	sqlite3_command provides a prepared statement for executing SQL statements.
*/
class sqlite3_command {
private:
	sqlite3_connection *m_con;

	sqlite3_stmt *m_stmt;
	unsigned int m_argc;

	// noncopyable.
	sqlite3_command(const sqlite3_command&);
	void operator=(const sqlite3_command&);

public:
	// constructs a closed command.
	sqlite3_command();

	// prepares the command with SQL.
	// char* and std::string versions must be in UTF-8.
	sqlite3_command(sqlite3_connection &con, const char *sql);
	sqlite3_command(sqlite3_connection &con, const wchar_t *sql);
	sqlite3_command(sqlite3_connection &con, const std::string &sql);
	sqlite3_command(sqlite3_connection &con, const std::wstring &sql);

	~sqlite3_command();
	
	// prepares the command with SQL.
	//TODO: document parameter format.
	// char* and std::string versions must be in UTF-8.
	void prepare(sqlite3_connection &con, const char *sql);
	void prepare(sqlite3_connection &con, const wchar_t *sql);
	void prepare(sqlite3_connection &con, const std::string &sql);
	void prepare(sqlite3_connection &con, const std::wstring &sql);

	// closes the command.
	void close();

	// bints a parameter index to null.
	void bind_null(int index);

	// binds a parameter index to a value.  index starts at 1.
	// char* and std::string versions must be in UTF-8.
	void bind(int index, int data);
	void bind(int index, long long data);
	void bind(int index, double data);
	void bind(int index, const char *data, int datalen = -1);
	void bind(int index, const wchar_t *data, int datalen = -1);
	void bind(int index, const void *data, int datalen);
	void bind(int index, const std::string &data);
	void bind(int index, const std::wstring &data);

	// executes the statement.  returns true if a row was returned.
	sqlite3_result step();

	// resets the statement to its original unexecuted unbound state.
	void reset();

	// gets a column value from the current row.  index starts at 0.
	// note: char* and std::string text versions return UTF-8.
	int getint(unsigned int idx);
	long long getint64(unsigned int idx);
	double getdouble(unsigned int idx);
	const char* gettext(unsigned int idx);
	const wchar_t* gettext16(unsigned int idx);
	std::size_t gettextlen(unsigned int idx);
	std::size_t gettextlen16(unsigned int idx);
	std::string getstring(unsigned int idx);
	std::wstring getstring16(unsigned int idx);
	std::string getblob(unsigned int idx);

	// executes a query without any rows returned.
	sqlite3_result executenonquery();

	// executes a query, returning the first column of the first row.
	// note: char* and std::string text versions return UTF-8.
	int executeint();
	long long executeint64();
	double executedouble();
	std::string executestring();
	std::wstring executestring16();
	std::string executeblob();
};

/*
	sqlite3_reader is a low-profile, scoped wrapper for resetting a
	command.  It allows exception-safe usage of stepping commands.
*/
class sqlite3_reader {
public:
	sqlite3_reader(sqlite3_command &cmd) : m_cmd(cmd) {}
	~sqlite3_reader() { m_cmd.reset(); }
	
private:
	sqlite3_command &m_cmd;

	// noncopyable.
	sqlite3_reader(const sqlite3_reader&);
	void operator=(const sqlite3_reader&);
};

/*
	sqlite3_transaction is a low-profile, scoped wrapper around BEGIN, COMMIT,
	and ROLLBACK.  It is intended for exception-safe transactions.
*/
class sqlite3_transaction {
private:
	sqlite3_connection &m_con;
	bool m_intrans;

	sqlite3_transaction(const sqlite3_transaction&);
	void operator=(const sqlite3_transaction&);

public:
	sqlite3_transaction(sqlite3_connection &con, bool begin = true);
	~sqlite3_transaction();

	bool in_transaction() const;

	bool begin();
	void commit();
	void rollback();
};

/*
	database_error is thrown whenever an error happens.
*/
class database_error : public std::runtime_error {
public:
	database_error(const char *msg);
	database_error(sqlite3_connection &con);
};

}
